/*


 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package inventorymanagement;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.sql.Statement;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;


/**
 *
 * @author Bilawal
 */
public class Categories extends javax.swing.JFrame  implements KeyListener {
    public static Object tf,jc;
    String oldname;
    /**
     * Creates new form NewJFrame
     */
    public Categories() {
        initComponents();
        setLocationRelativeTo(null);
        addKeyListener(this);
        setFocusable(true);
        setFocusTraversalKeysEnabled(false);
        setLocationRelativeTo(null);
         searchtf.addKeyListener(this);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        add = new javax.swing.JButton();
        edit = new javax.swing.JButton();
        save = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        view = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        cn = new javax.swing.JLabel();
        cn1 = new javax.swing.JTextField();
        ia = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        ia1 = new javax.swing.JComboBox();
        searchtf = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Inventory Management System[Categories]");

        add.setText("ADD");
        add.setToolTipText("Fill all fields and then click this to add category.");
        add.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        edit.setText("EDIT");
        edit.setToolTipText("Select any row and click this to edit it.");
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edit(evt);
            }
        });

        save.setText("SAVE");
        save.setToolTipText("Finalize editings and click this to save changes.");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        delete.setText("DELETE");
        delete.setToolTipText("Select any row and click this to delete item.");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        view.setText("VIEW");
        view.setToolTipText("Click this to view all categories.");
        view.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewActionPerformed(evt);
            }
        });

        jLabel1.setText("SEARCH");

        cn.setText("CATEGORY NAME");
        cn.setEnabled(false);

        ia.setText("IS ACTIVE");
        ia.setEnabled(false);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NAME", "STATUS"
            }
        ));
        jScrollPane1.setViewportView(table);

        ia1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "YES", "NO" }));

        searchtf.setToolTipText("Write category name here and Enter to search");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(edit, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(view, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 679, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cn1)
                    .addComponent(ia, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cn, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ia1, 0, 150, Short.MAX_VALUE)
                    .addComponent(searchtf, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(19, 19, 19))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(edit, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(view, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchtf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(cn, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cn1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(ia, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ia1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(298, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
   
    private void edit(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edit

        try {
            MyConnection connection = new MyConnection();
            int num = table.getSelectedRow();
            TableModel model = table.getModel();
            Object code = model.getValueAt(num, 0);
            System.out.println(code);
            connection.rs = connection.st.executeQuery("Select * from Categories where NAME='"+code+"'");
            connection.rs.next();  
          //
            
            cn.setEnabled(true);
            cn1.setEnabled(true);
            cn1.setText(connection.rs.getObject("Name").toString());
            ia1.setEnabled(true);
            ia1.setSelectedItem(connection.rs.getObject("active").toString());
            oldname = cn1.getText();
          
            // TODO add your handling code here:
      } 
        
        catch (SQLException ex) {
        JOptionPane.showMessageDialog(null, "Something went wrong!!");
        } 
        catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Something went wrong!!");
        }
    }//GEN-LAST:event_edit

 
    public static void insert() throws ClassNotFoundException, SQLException{
    
        MyConnection connection = new MyConnection();    
        tf=cn1.getText();
        jc=ia1.getSelectedItem();       
        try{  
          
            String sql=  "INSERT INTO categories  VALUES('"+tf+"','"+jc+"')";
                //"INSERT INTO CUSTOMER " + "VALUES('"+tf+"','"+jc+"')";
            connection.st.executeUpdate(sql);

        }
        catch(Exception e){
            e.printStackTrace();}
        
        } 
    
    
    public static void CreateTable() throws ClassNotFoundException{
        try{
            MyConnection connection = new MyConnection();
            DatabaseMetaData dbm = connection.con.getMetaData();
            connection.rs = dbm.getTables(null, null, "categories", null);
             if (!connection.rs.next()) {
                 PreparedStatement create = connection.con.prepareStatement("CREATE TABLE CUSTOMER"
                  +" (NAME VARCHAR(255), " + 
                 " STATUS VARCHAR(255))") ; 
                 create.executeUpdate();
             }else{
                 System.out.println("already exists");
             }
               
            connection.con.close(); 
    }
        catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Something went wrong!!");
        }
    
}
    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        try {
            if(!cn1.getText().equals("")&& !ia1.getSelectedItem().toString().equals("")){
                insert();
                JOptionPane.showMessageDialog(null, "Category added successfully.");
                viewActionPerformed(evt);  
            }
            else
                JOptionPane.showMessageDialog(null, "Please fill all fields.");
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Something went wrong!!");
        }

// TODO add your handling code here:
    }//GEN-LAST:event_addActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        try {
            if(!cn1.getText().equals("")&&!ia1.getSelectedItem().toString().equals("")){
                MyConnection con = new MyConnection();
                int i =con.st.executeUpdate("update categories set name ='"+cn1.getText()+"',active='"+ia1.getSelectedItem().toString()+"' where name='"+oldname+"'");
                if(i==1)
                    JOptionPane.showMessageDialog(null,"Updated Successfully");
                else
                    JOptionPane.showMessageDialog(null, "Something went wrong");
                viewActionPerformed(evt);
            }
    
            
            //tf=cn1.getText();
            //jc=ia1.getSelectedItem();
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Something went wrong!!");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Something went wrong!!");
        }
       
    }//GEN-LAST:event_saveActionPerformed

    private void viewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewActionPerformed

                                           
        try {
            MyConnection connection = new MyConnection();
            String query = "Select * from categories";
            connection.rs= connection.st.executeQuery(query);
            Object col[] = {"NAME","active"};
            Object data[][]={{cn1.getText(),ia1.getSelectedItem()}};
            DefaultTableModel model = new DefaultTableModel(col,0);
            model.setRowCount(0);
            
            int i =0;
            while(connection.rs.next()){
                model.addRow( new Object[]{connection.rs.getString(1),connection.rs.getString(2)});
                i++;
            }
            table.setModel(model);
            // TODO add your handling code here:
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Something went wrong!!");
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Something went wrong!!");
        }
    
        
        // TODO add your handling code here:
    }//GEN-LAST:event_viewActionPerformed

     public static void updateTable() throws SQLException, ClassNotFoundException{
        String query = "Select * from categories";
        MyConnection connection = new MyConnection();
            connection.rs= connection.st.executeQuery(query);
            Object col[] = {"Name","Active"};
            
            DefaultTableModel model = new DefaultTableModel(col,0);
            
            int i =0;
            while(connection.rs.next()){
                model.addRow( new Object[]{connection.rs.getString(1),connection.rs.getString(2)});
                
            }
            table.setModel(model);
    }
    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
                                         
        try {
            MyConnection connection = new MyConnection();
            int num = table.getSelectedRow();
            TableModel model = table.getModel();
            System.out.println(model.getValueAt(num, 0));
            Object code = model.getValueAt(num, 0);
            String query = "delete from categories where NAME ='"+code+"'";
            int i = connection.st.executeUpdate(query);
            viewActionPerformed(evt);
            if(i==1){
                JOptionPane.showMessageDialog(null,"Deleted Successfully.");
                updateTable();
                
            }
            
            
            // TODO add your handling code here:
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,"Something went wrong!!");
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Something went wrong!!");
        }
    }//GEN-LAST:event_deleteActionPerformed

    /*
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
              for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                  UIManager.setLookAndFeel("com.jtattoo.plaf.mcwin.McWinLookAndFeel");
              }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Categories.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Categories.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Categories.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Categories.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Categories().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private static javax.swing.JLabel cn;
    private static javax.swing.JTextField cn1;
    private javax.swing.JButton delete;
    private static javax.swing.JButton edit;
    private static javax.swing.JLabel ia;
    private static javax.swing.JComboBox ia1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton save;
    private static javax.swing.JTextField searchtf;
    private static javax.swing.JTable table;
    private static javax.swing.JButton view;
    // End of variables declaration//GEN-END:variables

    @Override
    public void keyTyped(KeyEvent ke) {
    }

    @Override
    public void keyPressed(KeyEvent ke) {
       
        try {
            System.out.println(KeyEvent.getKeyText(ke.getKeyCode()));
            if(KeyEvent.getKeyText(ke.getKeyCode()).equalsIgnoreCase("Escape")){
                this.setVisible(false);
                new Dashboard().setVisible(true);
            }
            MyConnection connection = new MyConnection();
            if(KeyEvent.getKeyText(ke.getKeyCode()).equals("Enter")&& !searchtf.equals("")){
                String ss=searchtf.getText();    //UPPER('%PriceOrder%')    lower(first_name) = 'fred';
                connection.rs = connection.st.executeQuery("Select * from categories where lower(NAME)='"+ss+"'OR Upper(NAME)='"+ss+"'");
           //  rs = stmt.executeQuery("Select * from CUSTOMER where NAME='"+ss+"'");
           
                if(!connection.rs.next())
                      JOptionPane.showMessageDialog(null,"Unable to find data!!");
                else{
                    DefaultTableModel model = (DefaultTableModel)table.getModel();
                    model.addRow(new Object[]{connection.rs.getString(1),connection.rs.getString(2)});
                }
            }
            
                
        } 
        catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Something went wrong!!");
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Something went wrong!!");
        }
        
    }

    @Override
    public void keyReleased(KeyEvent ke) {
    }
//
    

 
//
}

