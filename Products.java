/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package inventorymanagement;


import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.sql.Statement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;



import javax.swing.JOptionPane;
import javax.swing.UIManager;

import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;


public class Products extends javax.swing.JFrame implements KeyListener{
    MyConnection connection = new MyConnection();
    
   

    /**
     * Creates new form Products
     */
    public Products() throws ClassNotFoundException, SQLException {
        
        initComponents();
        addKeyListener(this);
        setFocusable(true);
        setLocationRelativeTo(null);
        setFocusTraversalKeysEnabled(false);
        DateFormat df = new SimpleDateFormat("yyyy/MM/dd");
        dateChooserCombo1.setDateFormat(df);
        jComboBox1.addItem("");
        ResultSet rs = connection.st.executeQuery("select * from categories");
        jComboBox1.removeAllItems();
        jComboBox1.addItem("");
            
        Boolean b =rs.next();
        if(b==true){
        do{
            if(rs.getString(2).equalsIgnoreCase("yes"))
            jComboBox1.addItem(rs.getString(1));
            b =rs.next();
        }while(b);
        }
        
            
        searchtf.addKeyListener(this);
        
        setTitle("\t\t\tInventory Mangement System[Products}");
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dateChooserDialog1 = new datechooser.beans.DateChooserDialog();
        dateChooserDialog2 = new datechooser.beans.DateChooserDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        searchtf = new javax.swing.JTextField();
        view = new javax.swing.JButton();
        add = new javax.swing.JButton();
        edit = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        save = new javax.swing.JButton();
        name = new javax.swing.JLabel();
        nametf = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        barcode = new javax.swing.JLabel();
        barcodetf = new javax.swing.JTextField();
        exdate = new javax.swing.JLabel();
        category = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        dateChooserCombo1 = new datechooser.beans.DateChooserCombo();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Inventory Management System [Products]");
        setName("Products"); // NOI18N

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product", "Bar Code", "Expiry Date", "Category"
            }
        ));
        jScrollPane1.setViewportView(table);

        jLabel1.setText("Search");

        searchtf.setToolTipText("Enter barcode here to search product.");
        searchtf.setOpaque(false);
        searchtf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchtfActionPerformed(evt);
            }
        });

        view.setText("View");
        view.setToolTipText("Click this to view all products in shop.");
        view.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewActionPerformed(evt);
            }
        });

        add.setText("Add");
        add.setToolTipText("Fill all fields and click this to add product.");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        edit.setText("Edit");
        edit.setToolTipText("Select any row and click this to make changes to row.");
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });

        jButton1.setText("Delete");
        jButton1.setToolTipText("Select any row and click this to delete it.");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        save.setText("Save");
        save.setToolTipText("Finalize changes and then click this to update it.");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        name.setText("Product Name");

        nametf.setOpaque(false);
        nametf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nametfActionPerformed(evt);
            }
        });

        barcode.setText("Barcode");

        barcodetf.setOpaque(false);
        barcodetf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                barcodetfActionPerformed(evt);
            }
        });

        exdate.setText("Expiry Date");

        category.setText("Category");

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 564, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nametf)
                            .addComponent(barcodetf)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(name)
                                    .addComponent(barcode, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(exdate, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(category, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(67, 67, 67)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(dateChooserCombo1, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(view, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(edit, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchtf)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(view, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(edit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)
                        .addComponent(searchtf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(name)
                        .addGap(1, 1, 1)
                        .addComponent(nametf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(barcode)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(barcodetf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(exdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateChooserCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(category)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchtfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchtfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchtfActionPerformed

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
             if(!nametf.equals("") && !barcodetf.equals("") && !jComboBox1.getSelectedItem().toString().equals("")){
            try {
                
                System.out.println(dateChooserCombo1.getText());
                
                String query = "INSERT INTO products(p_name,barcode,exdate,category)"
                        + "VALUES('"+nametf.getText()+"','"+Integer.parseInt(barcodetf.getText())+"','"+dateChooserCombo1.getText()+"','"+jComboBox1.getSelectedItem().toString()+"');";
                System.out.println(query);
                int i = connection.st.executeUpdate(query);
                if(i==1){
                    JOptionPane.showMessageDialog(null, "Item Inserted Successfully.");
                    updateTable();
                    nametf.setText("");
                    barcodetf.setText("");
                    barcodetf.setEnabled(true);
                    
                 
                    
                    
                }
                else
                    JOptionPane.showMessageDialog(null, "Unable to add Item!!");
                
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Unable to add Item!!");
                ex.printStackTrace();
            }
        }
        else
            JOptionPane.showMessageDialog(null,"Fill Complete Information!!");
           
    }//GEN-LAST:event_addActionPerformed

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
        try {
            MyConnection connection = new MyConnection();
            int num = table.getSelectedRow();
            TableModel model = table.getModel();
            Object code = model.getValueAt(num, 1);
            connection.rs = connection.st.executeQuery("Select * from products where barcode ="+code);
            connection.rs.next();
            nametf.setEnabled(true);
            nametf.setText(connection.rs.getObject("p_name").toString());
            barcodetf.setText(connection.rs.getObject("barcode").toString());
            barcodetf.setEnabled(false);
            Date d = connection.rs.getTimestamp("Exdate");
            Calendar c = Calendar.getInstance();
            c.setTime(d);
            dateChooserCombo1.setSelectedDate(c);
            //dateChooserCombo1.setSelectedDate((Calendar) connection.rs.getObject("Exdate"));
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Products.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_editActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            MyConnection connection = new MyConnection();
            int num = table.getSelectedRow();
            TableModel model = table.getModel();
            System.out.println(model.getValueAt(num, 1));
            Object code = model.getValueAt(num, 1);
            String query = "delete from products where barcode ="+code;
            int i = connection.st.executeUpdate(query);
            if(i==1){
                JOptionPane.showMessageDialog(null,"Deleted Successfully.");
                updateTable();
            }
            else
                JOptionPane.showMessageDialog(null, "Some problem occured,while deleting data, please try again.");
            
            // TODO add your handling code here:
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,"Unable to delete data!!");
            ex.printStackTrace();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Products.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void nametfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nametfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nametfActionPerformed

    private void barcodetfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_barcodetfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_barcodetfActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        
        try {
            
            /*PreparedStatement ps = connection.con.prepareStatement("update products set P_name = ?,exdate =?,category=? where barcode =?;");
           
            ps.setString(1, nametf.getText());
            ps.setString(2, exdatetf.getText());
            ps.setString(3, jComboBox1.getSelectedItem().toString());
            ps.setString(4, barcodetf.getText());
             ps.executeQuery();*/ 
            
            String query = "UPDATE products SET P_name = '"+nametf.getText()+"',Exdate='2019/8/7',Category='"+jComboBox1.getSelectedItem().toString()+"' where Barcode ="+barcodetf.getText();
            System.out.println(query);
            Statement st = connection.con.createStatement();
            
            int a = st.executeUpdate(query);            
            System.out.println(a+" a barcode :  "+barcodetf.getText()+""+query);
            
            if(a==0){
                JOptionPane.showMessageDialog(null, "Unable to update data,please try again.");
                
            }
            else if(a==1){
                JOptionPane.showMessageDialog(null, "Data updated successfully");
                updateTable();
            }
                
            // TODO add your handling code here:
        } catch (SQLException ex) {
            ex.printStackTrace();
            Logger.getLogger(Products.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveActionPerformed

    private void viewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewActionPerformed
        try {
            String query = "Select * from products";
            connection.rs= connection.st.executeQuery(query);
            Object col[] = {"Name","Barcode","Exdate","Category"};
            String data[][]={{nametf.getText(),barcodetf.getText(),dateChooserCombo1.getSelectedDate().toString(),jComboBox1.getSelectedItem().toString()}};
            DefaultTableModel model = new DefaultTableModel(col,0);
            model.setRowCount(0);
            int i =0;
            while(connection.rs.next()){
                model.addRow( new Object[]{connection.rs.getString(1),connection.rs.getInt(2),connection.rs.getString(3),connection.rs.getString(4)});
                i++;
            }
            table.setModel(model);
            // TODO add your handling code here:
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_viewActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
       
    }//GEN-LAST:event_jComboBox1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
       
        try {
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
               
                    UIManager.setLookAndFeel("com.jtattoo.plaf.mcwin.McWinLookAndFeel");
               //com.jtattoo.plaf.mint.MintLookAndFeel
            
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Products.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Products.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Products.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Products.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Products().setVisible(true);
                } catch (Exception ex) {
                    ex.printStackTrace();
                } 
            }
        });
    }
    public void updateTable() throws SQLException{
        
        String query = "Select * from products";
        connection.rs= connection.st.executeQuery(query);
        Object col[] = {"Name","Barcode","Exdate","Category"};
        String data[][]={{nametf.getText(),barcodetf.getText(),dateChooserCombo1.getSelectedDate().toString(),jComboBox1.getSelectedItem().toString()}};
        DefaultTableModel model = new DefaultTableModel(col,0);
            
        int i =0;
        while(connection.rs.next()){
            model.addRow( new Object[]{connection.rs.getString(1),connection.rs.getInt(2),connection.rs.getString(3),connection.rs.getString(4)});
            i++;
        }
        
        table.setModel(model);
            // TODO add your handling code here:
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JLabel barcode;
    private javax.swing.JTextField barcodetf;
    private javax.swing.JLabel category;
    private datechooser.beans.DateChooserCombo dateChooserCombo1;
    private datechooser.beans.DateChooserDialog dateChooserDialog1;
    private datechooser.beans.DateChooserDialog dateChooserDialog2;
    private javax.swing.JButton edit;
    private javax.swing.JLabel exdate;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel name;
    private javax.swing.JTextField nametf;
    private javax.swing.JButton save;
    private javax.swing.JTextField searchtf;
    private static javax.swing.JTable table;
    private javax.swing.JButton view;
    // End of variables declaration//GEN-END:variables

    @Override
    public void keyTyped(KeyEvent ke) {
    }

    @Override
    public void keyPressed(KeyEvent ke) {
        
        try {
             if(KeyEvent.getKeyText(ke.getKeyCode()).equalsIgnoreCase("Escape")){
                this.setVisible(false);
                new Dashboard().setVisible(true);
            }
            if(KeyEvent.getKeyText(ke.getKeyCode()).equals("Enter")&& !searchtf.equals("")){
                connection.rs = connection.st.executeQuery("Select * from products where barcode="+Integer.parseInt(searchtf.getText()));
                if(!connection.rs.next())
                      JOptionPane.showMessageDialog(null,"Unable to find data!!");
                  else{
                    nametf.setEnabled(true);
                    nametf.setText(connection.rs.getObject("p_name").toString());
                    barcodetf.setEnabled(true);
                    barcodetf.setText(connection.rs.getObject("barcode").toString());
                    
                    dateChooserCombo1.setSelectedDate((Calendar) connection.rs.getObject("exdate"));
                    //jComboBox1.setVisible(true);
                    //.setText(rs.getObject("category").toString());
                }
            }
            
                
        } 
        catch (SQLException ex) {
            ex.printStackTrace();
        }
        
    }

    @Override
    public void keyReleased(KeyEvent ke) {
    }
}
