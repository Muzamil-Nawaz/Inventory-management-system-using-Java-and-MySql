package inventorymanagement;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;

import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Abdul Rafay
 */
public class PurchaseInvoice extends javax.swing.JFrame implements KeyListener,CaretListener{
    MyConnection con;
    public PurchaseInvoice() throws ClassNotFoundException, SQLException{
        con = new MyConnection();
     
        initComponents();
        setLocationRelativeTo(null);
        addKeyListener(this);
        setFocusable(true);
        setFocusTraversalKeysEnabled(false);
        DateFormat df = new SimpleDateFormat("yyyy/MM/dd");
        date.setDateFormat(df);
        setTitle("Purchase Invoice");
        setLocationRelativeTo(null);
            String query1 = "Select * from supplier;";
            con.rs= con.st.executeQuery(query1);
            while (con.rs.next())
            {
                supplier.addItem(con.rs.getString("contact_person"));
            }
            
      jproduct.setEnabled(false);
            
             Barcode.addKeyListener(this);
             Quantity.addCaretListener(this);
             Search.addKeyListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel9 = new javax.swing.JLabel();
        jproduct = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        Barcode = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        supplier = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        PUP = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        Quantity = new javax.swing.JTextField();
        ATC = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        totalamount = new javax.swing.JTextField();
        Edit = new javax.swing.JButton();
        update = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        View = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        Search = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        pi = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        Searchb = new javax.swing.JButton();
        date = new datechooser.beans.DateChooserCombo();

        jLabel9.setText("for serching press space bar");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("Purchase Invoive"); // NOI18N

        jproduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jproductActionPerformed(evt);
            }
        });

        jLabel1.setText("Product");

        jLabel2.setText("Barcode");

        supplier.setEditable(true);
        supplier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supplierActionPerformed(evt);
            }
        });

        jLabel3.setText("Supplier");

        jLabel4.setText("Per Unit Price");

        PUP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PUPActionPerformed(evt);
            }
        });

        jLabel5.setText("Selected Quantity");

        Quantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuantityActionPerformed(evt);
            }
        });

        ATC.setText("ADD TO MART");
        ATC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ATCActionPerformed(evt);
            }
        });

        jLabel6.setText("Total Amount");

        totalamount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalamountActionPerformed(evt);
            }
        });
        totalamount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                totalamountKeyReleased(evt);
            }
        });

        Edit.setText("EDIT");
        Edit.setToolTipText("Select any row and click this to make any changes to it");
        Edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditActionPerformed(evt);
            }
        });

        update.setText("Save");
        update.setToolTipText("Finalize changes and click this to update it");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        Delete.setText("DELETE");
        Delete.setToolTipText("Select any row and click this to delete it");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        View.setText("VIEW");
        View.setToolTipText("Click this to view all Invoices");
        View.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewActionPerformed(evt);
            }
        });

        jLabel7.setText("Search");

        Search.setToolTipText("Enter barcode to view products");
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });

        pi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product", "Quantity", "Per Unit Price", "Total Amount", "Date", "Barcode"
            }
        ));
        jScrollPane1.setViewportView(pi);

        jLabel8.setText("Date");

        jLabel10.setText("(yyyy-mm-dd)*");

        Searchb.setText("Search");
        Searchb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchbActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(totalamount)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(supplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(Barcode, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jproduct, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(PUP, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(Quantity, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(ATC, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 661, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(Edit, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(View, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(68, 68, 68)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Searchb, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(View, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Edit, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(update, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(27, 27, 27)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(supplier, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Barcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jproduct, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(PUP, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Quantity, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(ATC, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Searchb))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(totalamount, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jproductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jproductActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jproductActionPerformed

    private void PUPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PUPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PUPActionPerformed

    private void totalamountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalamountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalamountActionPerformed

    private void ATCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ATCActionPerformed
   
        if(!jproduct.equals("") &&!Quantity.equals("") && !PUP.equals("") && !totalamount.equals("") && !date.equals("") && !Barcode.equals("")){
            try {
                
                String query = "INSERT INTO purchase_invoice(product_name,quantity,per_unit_price,total_amount,date,barcode)"
                        + "VALUES('"+jproduct.getText()+"','"+Integer.parseInt(Quantity.getText())+"','"+Integer.parseInt(PUP.getText())+"','"+Integer.parseInt(totalamount.getText())+"','"+date.getText()+"','"+Integer.parseInt(Barcode.getText())+"');";
                System.out.println(query);
                int i = con.st.executeUpdate(query);
                if(i==1){
                    JOptionPane.showMessageDialog(null, "Item Inserted Successfully.");
                    con.st.executeUpdate("insert into product_pricing values('"+jproduct.getText()+"','"+PUP.getText()+"',0,0,'"+PUP.getText()+"')");
                    updateTable();
                }
                else
                    JOptionPane.showMessageDialog(null, "Unable to add Item!!");
                
            }catch(Exception e){
                JOptionPane.showMessageDialog(null, "Something went wrong.");
            e.printStackTrace();}
        }
        else
            JOptionPane.showMessageDialog(null,"Fill Complete Information!!");
        
        
    }//GEN-LAST:event_ATCActionPerformed

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SearchActionPerformed

    private void supplierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supplierActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_supplierActionPerformed

    private void totalamountKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_totalamountKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_totalamountKeyReleased

    private void ViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewActionPerformed
        // TODO add your handling code here:
        try {
            String query = "Select * from purchase_invoice";
            con.rs= con.st.executeQuery(query);
            Object col[] = {"Product","Quantity","Per Unit Price","Total Amount","Date","Barcode"};
            String data[][]={{jproduct.getText(),Quantity.getText(),PUP.getText(),totalamount.getText(),date.getText(),Barcode.getText()}};
            DefaultTableModel model = new DefaultTableModel(col,0);
            model.setRowCount(0);
            int i =0;
            while(con.rs.next()){
                model.addRow( new Object[]{con.rs.getString(1),con.rs.getInt(2),con.rs.getInt(3),con.rs.getInt(4),con.rs.getString(5),con.rs.getInt(6)});
                i++;
            }
            pi.setModel(model);
            // TODO add your handling code here:
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_ViewActionPerformed

    private void EditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditActionPerformed
        // TODO add your handling code here:
         try {
            int num = pi.getSelectedRow();
            TableModel model = pi.getModel();
            Object code = model.getValueAt(num, 5);
            con.rs = con.st.executeQuery("Select * from purchase_invoice where barcode ="+code);
            con.rs.next();
            Barcode.setEnabled(true);
            jproduct.setEnabled(true);
             PUP.setEnabled(true);
             Quantity.setEnabled(true);
        date.setEnabled(true);
        totalamount.setEnabled(true);
        int p=con.rs.getInt("barcode");
            String o= Integer.toString(p);
            Barcode.setText(o);
            String h=con.rs.getString("product_name");
            jproduct.setText(h);
            int y=con.rs.getInt("per_unit_price");
            String d= Integer.toString(y);
            PUP.setText(d);
            int x=con.rs.getInt("quantity");
            String c= Integer.toString(x);
            Quantity.setText(c);
             String g=con.rs.getString("date");
            date.setText(g);
           int z=con.rs.getInt("total_amount");
            String e= Integer.toString(z);
            totalamount.setText(e);
           
             
            
            // TODO add your handling code here:
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        
        
        
    }//GEN-LAST:event_EditActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        // TODO add your handling code here:
        
        
         try {
            int num = pi.getSelectedRow();
            TableModel model = pi.getModel();
            System.out.println(model.getValueAt(num, 5));
            Object code = model.getValueAt(num, 5);
            String query = "delete from purchase_invoice where barcode ="+code;
            int i = con.st.executeUpdate(query);
            if(i==1){
                JOptionPane.showMessageDialog(null,"Deleted Successfully.");
                updateTable();
            }
            else{
                 JOptionPane.showMessageDialog(null,"Unable to delete data!!");
            }
            
            
            // TODO add your handling code here:
        } catch (SQLException ex) {
       
            ex.printStackTrace();
        }
    }//GEN-LAST:event_DeleteActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // TODO add your handling code here:
        
        int num = pi.getSelectedRow();
            TableModel model = pi.getModel();
            Object code2 = model.getValueAt(num, 5);
        
        String ss6=Barcode.getText();
        int s6=Integer.parseInt(ss6);
            
        String s1=jproduct.getText();
        
        String ss3=PUP.getText();
        int s3=Integer.parseInt(ss3);
        
        String ss2=Quantity.getText();
        int s2=Integer.parseInt(ss2);
        
        String s5=date.getText();
       
        String ss4=totalamount.getText();
          int s4=Integer.parseInt(ss4);
        
       
        
        
        try{
            String query = "update purchase_invoice set product_name='"+s1+"',quantity="+s2+",per_unit_price="+s3+",total_amount="+s4+",date='"+s5+"' ,barcode="+s6+" where barcode="+code2;
        System.out.println(query);      
            int i= con.st.executeUpdate(query);
            if(i==1){
               
                    JOptionPane.showMessageDialog(null, "Item updated Successfully.");    
            }
                else
                    JOptionPane.showMessageDialog(null, "Unable to update data!!");
                
        } catch (SQLException ex) {
            Logger.getLogger(PurchaseInvoice.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_updateActionPerformed

    private void SearchbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchbActionPerformed
     try {
         // TODO add your handling code here:
       
         con.rs = con.st.executeQuery("Select * from purchase_invoice where barcode="+Integer.parseInt(Search.getText()));
         
         if(!con.rs.next())
             JOptionPane.showMessageDialog(null,"Unable to find data!!");
         else{
             Barcode.setEnabled(true);
             jproduct.setEnabled(true);
             PUP.setEnabled(true);
             Quantity.setEnabled(true);
             date.setEnabled(true);
             totalamount.setEnabled(true);
             
             int p=con.rs.getInt("barcode");
             String o= Integer.toString(p);
             Barcode.setText(o);
             String h=con.rs.getString("product_name");
             jproduct.setText(h);
             int y=con.rs.getInt("per_unit_price");
             String d= Integer.toString(y);
             PUP.setText(d);
             int x=con.rs.getInt("quantity");
             String c= Integer.toString(x);
             Quantity.setText(c);
             String g=con.rs.getString("date");
             date.setText(g);
             int z=con.rs.getInt("total_amount");
             String v= Integer.toString(z);
             totalamount.setText(v);}
        
     } catch (SQLException ex) {
        Logger.getLogger(PurchaseInvoice.class.getName()).log(Level.SEVERE, null, ex);
       
     }
    }//GEN-LAST:event_SearchbActionPerformed

    private void QuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuantityActionPerformed
        // TODO add your handling code here:
       
    }//GEN-LAST:event_QuantityActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
              
               UIManager.setLookAndFeel("com.jtattoo.plaf.mcwin.McWinLookAndFeel");
               //com.jtattoo.plaf.mint.MintLookAndFeel
            
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PurchaseInvoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PurchaseInvoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PurchaseInvoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PurchaseInvoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
       
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new PurchaseInvoice().setVisible(true);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(PurchaseInvoice.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(PurchaseInvoice.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ATC;
    private javax.swing.JTextField Barcode;
    private javax.swing.JButton Delete;
    private javax.swing.JButton Edit;
    private javax.swing.JTextField PUP;
    private javax.swing.JTextField Quantity;
    private javax.swing.JTextField Search;
    private javax.swing.JButton Searchb;
    private javax.swing.JButton View;
    private datechooser.beans.DateChooserCombo date;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jproduct;
    private javax.swing.JTable pi;
    private javax.swing.JComboBox<String> supplier;
    private javax.swing.JTextField totalamount;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables

    private void updateTable() throws SQLException{
     
         //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.

   String  query = "Select * from purchase_invoice";
         con.rs= con.st.executeQuery(query);
         Object col[] = {"product_name","quantity","per_unit_price","total_amount","date","bar_code"};
         
         DefaultTableModel model = new DefaultTableModel(col,0);
         
         int i =0;
         while(con.rs.next()){
             model.addRow( new Object[]{con.rs.getString(1),con.rs.getInt(2),con.rs.getString(3),con.rs.getString(4),con.rs.getString(5),con.rs.getString(6)});
             
         }
         pi.setModel(model);}




    @Override
    public void keyTyped(KeyEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
     
}
                
        
    

    @Override
    public void keyPressed(KeyEvent e) throws NumberFormatException {
          try{
             if(KeyEvent.getKeyText(e.getKeyCode()).equalsIgnoreCase("Escape")){
                this.setVisible(false);
                new Dashboard().setVisible(true);
            }
             if(KeyEvent.getKeyText(e.getKeyCode()).equals("Enter") && !Barcode.equals("")){
         
        
                con.rs = con.st.executeQuery("Select p_name from products where barcode="+Integer.parseInt(Barcode.getText()));
                if(!con.rs.next())
                    JOptionPane.showMessageDialog(null,"Unable to find data!!");
                
                else
                {
                    
                    jproduct.setText(con.rs.getString(1));}
                jproduct.setEditable(false);
            
           }
  
        } catch (SQLException ex) {
            Logger.getLogger(PurchaseInvoice.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    
    
    } 
        
     


    @Override
    public void keyReleased(KeyEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
       
             
    }

    @Override
    public void caretUpdate(CaretEvent e) {
        int h=Integer.parseInt(PUP.getText());
        int g=Integer.parseInt(Quantity.getText());
        int z=h*g; 
        String s=Integer.toString(z);
        totalamount.setText(s);
    }
}
